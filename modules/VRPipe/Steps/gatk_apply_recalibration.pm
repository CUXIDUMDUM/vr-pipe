use VRPipe::Base;

#Example ApplyRecalibration command - GATK v1.3
#java -Xmx3g -jar GenomeAnalysisTK.jar \
#   -T ApplyRecalibration \
#   -R reference/human_g1k_v37.fasta \
#   -input NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.b37.vcf \
#   --ts_filter_level 99.0 \
#   -tranchesFile path/to/output.tranches \
#   -recalFile path/to/output.recal \
#   -o path/to/output.recalibrated.filtered.vcf

class VRPipe::Steps::gatk_apply_recalibration extends VRPipe::Steps::gatk {
    around options_definition {
        return { %{$self->$orig},
                 reference_fasta => VRPipe::StepOption->get(description => 'absolute path to reference genome fasta'),
                 apply_recal_opts => VRPipe::StepOption->get(description => 'options for GATK ApplyRecalibration, excluding reference genome, input and output files'),
               };
    }

    method inputs_definition {
        return { vcf_files => VRPipe::StepIODefinition->get(type => 'bin', max_files => -1, description => 'one or more tabixed vcf files processed by VariantRecalibrator'),
			recal_files => VRPipe::StepIODefinition->get(type => 'txt', max_files => -1, description => 'a recalibration table file in CSV format for each input vcf'),
			tranches_files => VRPipe::StepIODefinition->get(type => 'txt', max_files => -1, description => 'a tranches file generated by VariantRecalibrator for each vcf'),
		};
    }

    method body_sub {
        return sub {
            use VRPipe::Utils::gatk;
            
            my $self = shift;
            my $options = $self->options;
            my $gatk = VRPipe::Utils::gatk->new(gatk_path => $options->{gatk_path}, java_exe => $options->{java_exe});
            
            my $apply_recal_opts = $options->{apply_recal_opts};
			my $reference_fasta = $options->{reference_fasta};

            my $req = $self->new_requirements(memory => 1200, time => 1);
            my $jvm_args = $gatk->jvm_args($req->memory);

			my $i;
			for($i=0;$i<@{$self->inputs->{vcf_files}};$i++) {
				my $vcf = $self->inputs->{vcf_files}[$i];
                my $vcf_path = $vcf->path;
				my $basename = $vcf->basename;
				if ($basename =~ /\.vcf.gz$/) {
					$basename =~ s/\.vcf.gz$/.recal.vcf.gz/;
				}
				else {
					$basename =~ s/\.vcf$/.recal.vcf/;
				}
				my $recal_file = $self->inputs->{recal_files}[$i];
                my $recal_file_path = $recal_file->path;
				my $tranches_file = $self->inputs->{tranches_files}[$i];
                my $tranches_file_path = $tranches_file->path;

				my $vcf_recal_file = $self->output_file(output_key => 'recalibrated_vcfs', basename => $basename, type => 'vcf');
				my $vcf_recal_path = $vcf_recal_file->path;

				my $cmd = $gatk->java_exe.qq[ $jvm_args -jar ].$gatk->jar.qq[ -T ApplyRecalibration -R $reference_fasta --input $vcf_path -tranchesFile $tranches_file_path -recalFile $recal_file_path -o $vcf_recal_path $apply_recal_opts ];
#				$self->warn("input size check !!!!");
#				$self->warn($cmd);
				$self->dispatch([$cmd, $req, {output_files => [$vcf_recal_file]}]); 
				$self->dispatch_wrapped_cmd('VRPipe::Steps::gatk_apply_recalibration', 'apply_recalibration', [$cmd, $req, {output_files => [$vcf_recal_file]}]);
			}
        };
    }
    method outputs_definition {
        return { recalibrated_vcfs => VRPipe::StepIODefinition->get(type => 'vcf', max_files => -1, description => 'a recalibrated vcf file for each input vcf') };
    }
    method post_process_sub {
        return sub { return 1; };
    }
    method description {
        return "Run gatk ApplyRecalibration to apply recalibrations to vcf files processed by VariantRecalibrator";
    }
    method max_simultaneous {
        return 0; # meaning unlimited
    }

    method apply_recalibration (ClassName|Object $self: Str $cmd_line) {

        my ($input_path, $output_path) = $cmd_line =~ /-input (\S+) .* -o (\S+) /;
        my $input_file = VRPipe::File->get(path => $input_path);
        
        my $input_lines = $input_file->lines;
        
        $input_file->disconnect;
        system($cmd_line) && $self->throw("failed to run [$cmd_line]");
        
        my $output_file = VRPipe::File->get(path => $output_path);
        $output_file->update_stats_from_disc;
        my $output_lines = $output_file->lines;
        
		# Should have extra header lines
        unless ($output_lines >= $input_lines) {
            $output_file->unlink;
            $self->throw("Output VCF has $output_lines lines, less than input $input_lines");
        }
        else {
            return 1;
        }
    }
}

1;
