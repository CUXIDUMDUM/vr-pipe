#!/usr/bin/env perl
use strict;
use warnings;

use lib '/nfs/users/nfs_s/sb10/src/git/VertebrateResequencing/vr-pipe/modules';

use VRPipe::FrontEnd;
use Path::Class;
use Data::Dumper;

my $frontend = VRPipe::FrontEnd->new(description => "Get information on files created by VRPipe - what pipeline created them, and what metadata they have.",
                                     opt_spec => [ [],
                                                   [ q[Specify which file(s) you want to know about by supplying at least one of these alternatives:] ],
                                                   [ 'path=s@', 'Get info on the file at this absolute path. Can be repeated' ],
                                                   [ 'AND/OR' ],
                                                   [ 'setup=s@', 'Get info on the (existing) output files of this PipelineSetup (id or name). Can be repeated', { persistent_object => 'PipelineSetup' } ],
                                                   [ 'step=s@', q[A step name/number to choose which step of the --setup(s) you're interested in. If a step outputs more than one kind of file, you can limit to just one of the kinds by saying something like --step "stepname|kindname". If --setup is used and --step isn't supplied at all, gets info on all (existing) output files of all steps. Can be repeated] ],
                                                   [ 'limit|l=i', 'Show info only on the first --limit number of files that match the above criteria'],
                                                   [],
                                                   [ q[Choose what information to display (by default just outputs the current path to the file):] ],
                                                   [ 'setup_info', 'Show details about the PipelineSetup that created the file' ],
                                                   [ 'cmd_summary', 'Show a simplyfied summary of what commands where used to generate the file (may not be available for all pipelines or steps)' ],
                                                   [ 'cmd_lines', 'Show the real complete command lines that were executed in order to generate the file' ],
                                                   [ 'time', 'Show the total wall time that the cmd_lines took to run, in seconds' ],
                                                   [ 'metadata:s', 'Show the metadata associated with the file; optionally you can supply a comma separated list of metadata keys to restrict the output' ],
                                                   [ 'lines', 'Show the number of lines in the file' ],
                                                   [ 'size', 'Show the size of the file in bytes' ],
                                                   [ 'md5', 'Show the md5 checksum for the file (if it has been previously calculated)' ],
                                                   [],
                                                   [ q[Choose how to display the information (these are mutually exclusive):] ],
                                                   [ 'display=s', q[report=present a multi-line report for each file; tab=present the requested info in tab-separated columns (if using --metadata you must supply it the list of metadata keys you want to output)], {default => 'report'} ],
                                                   [ 'tab_columns=s', q[For --display tab mode, supply a list of comma-separated display option names to choose the order of columns (path is always first), eg. --tab_columns size,md5,metadata --metadata length,height,depth would give output with columns: path size md5 length height depth] ],
                                                 ],
                                     no_user_option => 1);

my @paths = $frontend->option_was_set('path') ? @{$frontend->opts('path')} : ();
my @setups = $frontend->option_was_set('setup') ? @{$frontend->opts('setup')} : ();
my @steps = $frontend->option_was_set('step') ? @{$frontend->opts('step')} : ();
unless (@paths || @setups) {
    $frontend->die_with_error("--path or --setup is required");
}
if (@steps && ! @setups) {
    $frontend->die_with_error("--step makes no sense without --setup");
}
my $limit = $frontend->opts('limit') || 0;
my $display_type = $frontend->opts('display');
unless ($display_type eq 'report' || $display_type eq 'tab') {
    $frontend->die_with_error("--display must be report|tab");
}
my $do_tab = $display_type eq 'tab';
my $do_metadata = $frontend->option_was_set('metadata');
my $desired_metadata = $frontend->opts('metadata');
if ($do_tab && $do_metadata && ! $desired_metadata) {
    $frontend->die_with_error("When using --display tab, --metadata must be given an argument");
}

my %output_types;
foreach my $type (qw(setup_info cmd_summary cmd_lines time metadata lines size md5)) {
    $frontend->option_was_set($type) || next;
    $output_types{$type} = 1;
}
my @tab_cols;
if ($frontend->option_was_set('tab_columns')) {
    my @desired_cols = split(',', $frontend->opts('tab_columns'));
    foreach my $col (@desired_cols) {
        unless (exists $output_types{$col}) {
            $frontend->die_with_error("You included '$col' in yout --tab_columns specification, but that isn't a requested or known information type");
        }
        push(@tab_cols, $col);
    }
}
else {
    foreach my $col (qw(size lines md5 time metadata)) {
        if (exists $output_types{$col}) {
            push(@tab_cols, $col);
        }
    }
}

my $schema = $frontend->schema;

# handle --paths
my %files;
my $limit_count = 0;
foreach my $path (@paths) {
    my $file = $schema->resultset('File')->find({ path => $path });
    unless ($file) {
        $frontend->error("VRPipe does not know about $path; ignoring");
    }
    else {
        my $fid = $file->id;
        unless (exists $files{$fid}) {
            $files{$file->id} = $file;
            $limit_count++;
        }
        if ($limit) {
            last if $limit_count >= $limit;
        }
    }
}

# handle --setup and --step
if (@setups && $limit ? ($limit_count < $limit) : 1) {
    my %desired_steps;
    my $limit_steps = 0;
    if (@steps) {
        $limit_steps = 1;
        foreach my $step_name (@steps) {
            my ($name, $kind) = split('\|', $step_name);
            $kind ||= 'all';
            if ($name =~ /^\d+$/) {
                $desired_steps{numbers}->{$name}->{$kind} = 1;
            }
            else {
                $desired_steps{names}->{$name}->{$kind} = 1;
            }
        }
    }
    LIMIT_BREAK: foreach my $setup (@setups) {
        my @step_members = $setup->pipeline->steps;
        my @allowed_step_members;
        my %allowed_kinds;
        if ($limit_steps) {
            foreach my $stepm (@step_members) {
                my $smid = $stepm->id;
                my $step_name = $stepm->step->name;
                if (exists $desired_steps{names}->{$step_name}) {
                    foreach my $kind (keys %{$desired_steps{names}->{$step_name}}) {
                        $allowed_kinds{$smid}->{$kind} = 1;
                    }
                }
                my $step_num = $stepm->step_number;
                if (exists $desired_steps{numbers}->{$step_num}) {
                    foreach my $kind (keys %{$desired_steps{numbers}->{$step_num}}) {
                        $allowed_kinds{$smid}->{$kind} = 1;
                    }
                }
                next unless keys %{$allowed_kinds{$smid}};
                
                push(@allowed_step_members, $stepm);
            }
        }
        else {
            foreach my $stepm (@step_members) {
                my $smid = $stepm->id;
                $allowed_kinds{$smid}->{all} = 1;
            }
            @allowed_step_members = (@step_members);
        }
        
        # loop through completed elements
        my $pipeline_length = @step_members;
        my $elements = $setup->datasource->elements;
        foreach my $element (@$elements) {
            my $element_state = VRPipe::DataElementState->get(pipelinesetup => $setup, dataelement => $element);
            unless ($element_state->completed_steps == $pipeline_length) {
                next;
            }
            
            # get output files
            foreach my $stepm (@allowed_step_members) {
                my $stepstate = VRPipe::StepState->get(stepmember => $stepm, dataelement => $element, pipelinesetup => $setup);
                my $step_outs = $stepstate->output_files;
                my $smid = $stepm->id;
                my $force = exists $allowed_kinds{$smid}->{all};
                my $step_name = $stepm->step->name;
                my $step_num = $stepm->step_number;
                my $step_desc = "Step $step_num ($step_name)";
                while (my ($kind, $files) = each %$step_outs) {
                    unless ($force) {
                        next unless exists $allowed_kinds{$smid}->{$kind};
                    }
                    my @these_files = grep { $_->s || $_->resolve->s } @$files;
                    
                    foreach my $file (@these_files) {
                        my $fid = $file->id;
                        unless (exists $files{$fid}) {
                            $files{$fid} = $file;
                            $limit_count++;
                        }
                        
                        if ($limit) {
                            last LIMIT_BREAK if $limit_count >= $limit;
                        }
                    }
                }
            }
        }
    }
}

# output header if in tab mode
my @desired_metadata_keys;
if ($desired_metadata) {
    @desired_metadata_keys = split(',', $desired_metadata);
}
if ($do_tab) {
    my $header = join("\t", 'path', @tab_cols);
    
    if (@desired_metadata_keys) {
        my $extra_cols = join("\t", @desired_metadata_keys);
        $header =~ s/metadata/$extra_cols/;
    }
    
    print $header, "\n";
}

# output file info
foreach my $fid (sort { $a <=> $b } keys %files) {
    my $file = $files{$fid};
    my $path = $file->path->stringify;
    unless ($file->s) {
        $file = $file->resolve;
    }
    
    if ($do_tab) {
        print $path;
    }
    else {
        print "\n$path:\n";
    }
    
    foreach my $col (@tab_cols) {
        my $result;
        if ($col eq 'setup_info') {
            #...
        }
        elsif ($col eq 'cmd_summary') {
            #...
        }
        elsif ($col eq 'cmd_lines') {
            #...
        }
        elsif ($col eq 'time') {
            #...
        }
        elsif ($col eq 'lines') {
            $result = $file->_lines || 'unknown';
        }
        elsif ($col eq 'size') {
            $result = $file->s;
        }
        elsif ($col eq 'md5') {
            $result = $file->md5 || 'unknown';
        }
        elsif ($col eq 'metadata') {
            my $meta = $file->metadata;
            
            if ($do_tab) {
                my @results;
                foreach my $key (@desired_metadata_keys) {
                    my $val = $meta->{$key};
                    push(@results, defined $val ? $val : 'unknown');
                }
                $result = join("\t", @results);
            }
            else {
                my $result_meta;
                if ($desired_metadata) {
                    foreach my $key (@desired_metadata_keys) {
                        $result_meta->{$key} = $meta->{$key};
                    }
                }
                else {
                    $result_meta = $meta;
                }
                
                my @results;
                foreach my $key (sort keys %$result_meta) {
                    my $val = $result_meta->{$key};
                    push(@results, "\t\t$key => $val");
                }
                $result = "\n".join("\n", @results);
            }
        }
        
        if ($do_tab) {
            print "\t", $result;
        }
        else {
            print "\t$col: ", $result, "\n";
        }
    }
    
    print "\n";
}

exit;