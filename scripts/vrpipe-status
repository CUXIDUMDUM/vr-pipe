#!/usr/bin/env perl
use strict;
use warnings;

use VRPipe::FrontEnd;

my $frontend = VRPipe::FrontEnd->new(description => "See the overall state of active pipeline setups.",
                                     opt_spec => [ [ 'setup=s@', 'Only show details for the given PipelineSetup (by id or name); you can repeat this option', { persistent_object => 'PipelineSetup' } ],
                                                   [ 'incomplete|i', 'Only show details of PipelineSetups that are incomplete (does not affect --list mode)' ],
                                                   [ 'brief|b', 'Do not show full config details of each PipelineSetup, just the completion state summary' ],
                                                   [ 'list|l', 'Just list out the setup names and ids without details' ] ]);

my $list = $frontend->opts('list');
my $incomplete_only = $frontend->opts('incomplete');
my $brief = $frontend->opts('brief');

my @setups = $frontend->get_pipelinesetups();

foreach my $setup (@setups) {
    my $active = $setup->active;
    my $note = '';
    unless ($active) {
        $note = 'currently DEACTIVATED ';
    }
    if ($list) {
        $frontend->output("--- Pipeline Setup '", $setup->name, "' (id ", $setup->id, " for user ", $setup->user, ") $note---");
        next;
    }
    
    my $datasource = $setup->datasource;
    my $num_elements = scalar(@{$datasource->elements});
    my @incomplete = @{$datasource->incomplete_element_states($setup)};
    my $num_incomplete = @incomplete;
    next if $incomplete_only && ! $num_incomplete;
    $frontend->output("--- Pipeline Setup '", $setup->name, "' (id ", $setup->id, " for user ", $setup->user, ") $note---");
    
    my $pipeline = $setup->pipeline;
    my $step_members = $pipeline->steps;
    unless ($brief) {
        $frontend->output('Pipeline: ', $pipeline->name, ' | ', $step_members, ' steps | ', $pipeline->description);
        my $ps_opts = $setup->options;
        if (keys %$ps_opts) {
            $frontend->display_hash('PipelineSetup options', $ps_opts);
        }
        else {
            $frontend->output("(used with default/no options)");
        }
        $frontend->output('PipelineSetup outout root: ', $setup->output_root);
        
        $frontend->output('Datasource: ', $datasource->type, ' | ', $datasource->method, ' | ', $datasource->source);
        my $ds_opts = $datasource->options;
        if (keys %$ds_opts) {
            $frontend->display_hash('Datasource options', $ds_opts);
        }
        else {
            $frontend->output("(used with default/no options)");
        }
        
        $frontend->output("\n");
    }
    
    $frontend->output("There are a total of $num_elements Data Elements in the datasource to work on, and $num_incomplete elements are incomplete");
    if (@incomplete) {
        my %status_hash;
        my $fully_complete = $num_elements - $num_incomplete;
        $status_hash{"$step_members steps completed"} = $fully_complete;
        my $num_steps_complete = $fully_complete * $step_members;
        foreach my $es (@incomplete) {
            my $completed_steps = $es->completed_steps;
            $num_steps_complete += $completed_steps;
            $status_hash{"$completed_steps steps completed"}++;
        }
        $frontend->display_hash('Breakdown', \%status_hash, [sort { my ($ay) = $a =~ /^(\d+)/; my ($be) = $b =~ /^(\d+)/; $ay <=> $be } keys %status_hash]);
        
        my $steps_to_complete = $num_elements * $step_members;
        my $percent_complete = sprintf("%0.2f", (100 / $steps_to_complete) * $num_steps_complete);
        $frontend->output("Pipeline currently $percent_complete\% complete ($num_steps_complete / $steps_to_complete steps completed)");
    }
    else {
        $frontend->output("Pipeline currently 100\% complete!");
    }
    
    $frontend->output("------\n\n");
}

exit;